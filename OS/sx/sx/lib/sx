#!/bin/bash

# get and store the operating system name
OS=`cat /etc/os-release | grep "PRETTY_NAME" | sed 's/PRETTY_NAME=//g' | sed 's/["]//g'`
SXLIB_VERSION="0.3.9"
S2I_DEST=$SX_S2IDIR/src
MYS2I_DEST=/tmp/mys2i

# use xterm and set current PID
export TERM=xterm
pid=0

# return if verbose is activated
function isVerbose {
    if [[ "$SX_VERBOSE" == true || "$SX_VERBOSE" == "true" ]] ; then
        return 1
    else
        return 0
    fi 
}

# echo if verbose if activated
function echoVerbose {
    isVerbose
    if [ "$?" -eq 1 ] ; then
        echo "$@"
    fi 
}

# echo if verbose if not activated
function echoNotVerbose {
    isVerbose
    if [ "$?" -eq 0 ] ; then
        echo "$@"
    fi 
}

# echo if debug if activated
function echoDebug {
    if [[ "$SX_DEBUG" == true || "$SX_DEBUG" == "true" ]] ; then
        echo "$@"
    fi 
}

# function executed when pre-deploy hook is called
function genericPreDeploy {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME running PRE-DEPLOY HOOK"
    echoNotVerbose "container $HOSTNAME running PRE-DEPLOY HOOK"
    echoVerbose "| "
    displayInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "pre-deploy"
    exit 0;
}

# function executed when post-deploy hook is called
function genericPostDeploy {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running POST-DEPLOY HOOK"
    echoNotVerbose "container $HOSTNAME  running POST-DEPLOY HOOK"
    echoVerbose "| "
    displayInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "post-deploy" 
    exit 0;
}

# function executed when pre-build hook is called
function genericPostBuild {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running POST-BUILD HOOK"
    echoNotVerbose "container $HOSTNAME  running POST-BUILD HOOK"
    echoVerbose "| "
    displayInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "post-build" 
    exit 0;
}

# function executed when assemble hook is called
function genericAssemble {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running ASSEMBLE"
    echoNotVerbose "container $HOSTNAME  running ASSEMBLE"
    echoVerbose "| "
    displayInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose "Fixing perm on $S2I_DEST"
    if [[ -r $S2I_DEST ]]; then
      chgrp 0 -R $S2I_DEST
      chmod g=u -R $S2I_DEST
      moveSourceCode $S2I_DEST $APP_PATH
    fi;
    testAndRunSourceCodeScript "assemble" 
    exit 0;
}

# function executed on container startup
function genericRun {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is RUNNING"
    echoNotVerbose "container $HOSTNAME is RUNNING"
    echoVerbose "| "
    displayInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        testAndRunSourceCodeScript "run" 
    else
        echo "Start default daemon (no source code run script)"
        startDaemon
    fi 
}

# Display general usage
function genericUsage {
genericHeader
echoVerbose "+====================================================="
displayInformation "| "
echoVerbose "+====================================================="
echoDebug `env`
cat <<EOF

$SX_SUMMARY

Usage:
  docker run $SX_ID [command]

- Build Commands:
  assemble         execute for building output image when using s2i (alias : build)
  post-build       execute after building image
  pre-deploy       execute before the deployment begins (openshift).
  post-deploy      execute after the deployment strategy completes (openshift).

- Run Commands:
  run              execute the service on container startup (alias : start)
  isLive           return the service health (alias : health)
  isReady          return the service readiness

- General Commands:
  daemon           execute the container as a daemon (keep alive)
  usage            this message
  usageS2i         using this container with s2i or openshift build framework
  info             give information about the running container
  version          give the version of the running container
EOF
exit 0;
}

# Display S2I usage
function genericUsageS2I {
genericHeader
echoVerbose "+====================================================="
displayInformation "| "
echoDebug `env`
echoVerbose "+====================================================="
cat <<EOF

Startx builder container to use with s2i or openshift

Usage:
  s2i $SX_ID <code_repo_url> â‰¤image_name>

Code repository must have a `run` script who will be executed on container startup

EOF
exit 0;
}

# Display general welcome message
function genericWelcome {
genericHeader
cat <<EOF

Welcome to the $SX_ID base image. If you see this message, you have
probably run this container without arguments. See usage for more informations.

docker run $SX_ID usage

EOF
genericUsage
exit 0;
}

# Display general header
function genericHeader {
if [[ "$SX_VERBOSE" == true || "$SX_VERBOSE" == "true" ]] ; then
cat << "EOF"
  ____  _             _         
 / ___|| |_ __ _ _ __| |___  __ 
 \___ \| __/ _` | '__| __\ \/ / 
  ___) | || (_| | |  | |_ >  <  
 |____/ \__\__,_|_|_  \__/_/\_\       _ 
 |  _ \  ___   ___| | _____ _ __     (_)_ __ ___   __ _  __ _  ___  ___  
 | | | |/ _ \ / __| |/ / _ \ '__|____| | '_ ` _ \ / _` |/ _` |/ _ \/ __| 
 | |_| | (_) | (__|   <  __/ | |_____| | | | | | | (_| | (_| |  __/\__ \ 
 |____/ \___/ \___|_|\_\___|_|       |_|_| |_| |_|\__,_|\__, |\___||___/ 
                                                        |___/ 
EOF
fi 
}

# Display information
function displayInformation {
  echoVerbose $1 "type      : $SX_TYPE"
  echoVerbose $1 "service   : $SX_SERVICE"
  echoVerbose $1 "image     : $SX_ID:$SX_VERSION"
  echoVerbose $1 "name      : $SX_NAME"
  echoVerbose $1 "OS        : $OS"
  echoVerbose $1 "container : $HOSTNAME"
  echoVerbose $1 "sx-lib    : v$SXLIB_VERSION"
  echoNotVerbose "running on $OS (sxlib v$SXLIB_VERSION)"
  echoNotVerbose "based on $SX_ID:$SX_VERSION"
}

# Display information
function genericAllInformation {
  displayInformation
  echoDebug `env`
  exit 0;
}

# Display version
function genericVersion {
  echo $SXDBTOOLS_VERSION
  exit 0;
}

# Display liveness status
function genericIsLive {
  echo "OK"
  exit 0;
}

# Display readyness status
function genericIsReady {
  echo "OK"
  exit 0;
}

# start daemon
function startDaemon {
    while true; do
        echoVerbose "$HOSTNAME is alive and running $SX_ID:$SX_VERSION ($OS)"
        echoNotVerbose "$HOSTNAME is alive"
        sleep 10
    done
}

# Display daemon
function genericDaemon {
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is RUNNING"
    echoVerbose "| "
    displayInformation "| "
    echoVerbose "+====================================================="
    startDaemon
}

# test if a source code script of the given type exist a could be run
function testAndRunSourceCodeScript {
  if [[ -r $MYS2I_DEST/$1 ]]; then
      echoDebug "Found source code $1 script"
      if [[ -x $MYS2I_DEST/$1 ]]; then
          echo "Execute source code $1 script"
          . $MYS2I_DEST/$1
      else
          echo "WARN: source code $1 script is not executable"
      fi 
  else
      echoVerbose "No source code $1 script"
  fi 
}


function moveSourceCode {
  echoVerbose "Copy source from $1 > $2"
  cp -R $1/* $2/
  projectScriptDir=""
  if [[ -r $1/sx ]]; then
      echoVerbose "Found source code CI/CD scripts in sx/"
      projectScriptDir=sx
  elif [[ -r $1/s2i ]]; then
      echoVerbose "Found source code CI/CD scripts in s2i/"
      projectScriptDir=s2i
  elif [[ -r $1/.sx ]]; then
      echoVerbose "Found source code CI/CD scripts in .sx/"
      projectScriptDir=.sx
  elif [[ -r $1/.s2i ]]; then
      echoVerbose "Found source code CI/CD scripts in .s2i/"
      projectScriptDir=.s2i
  fi 
  if [[ "$projectScriptDir" != "" ]] ; then
      echoVerbose "source code CI/CD directory $projectScriptDir found"
      echoVerbose "Move source code scripts in $MYS2I_DEST"
      mv $1/$projectScriptDir $MYS2I_DEST
      echoVerbose "Fixing source code scripts perms"
      chown 1001:0 -R $MYS2I_DEST
      chmod g=u -R $MYS2I_DEST
      chmod ug+x -R $MYS2I_DEST/*
  else
      echoVerbose "no source code CI/CD directory found"
  fi 
  echoVerbose "Remove source temp $S2I_DEST"
  rm -rf $S2I_DEST
}