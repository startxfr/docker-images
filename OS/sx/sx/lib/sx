#!/bin/bash

# get and store the operating system name
OS=`cat /etc/os-release | grep "PRETTY_NAME" | sed 's/PRETTY_NAME=//g' | sed 's/["]//g'`
SXLIB_VERSION="0.1.6"

# use xterm and set current PID
export TERM=xterm
pid=0

# echo if verbose if activated
function echoVerbose {
    if [ "$SX_VERBOSE" = true ] ; then
        echo $1 $2 $3 $4
    fi 
}

# echo if debug if activated
function echoDebug {
    if [ "$SX_DEBUG" = true ] ; then
        echo $1 $2 $3 $4
    fi 
}

# function executed when pre-deploy hook is called
function genericPreDeploy {
    echo "+====================================================="
    echo "| Container $HOSTNAME is running PRE-DEPLOY HOOK"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    testAndRunSourceCodeScript "pre-deploy" 
}

# function executed when post-deploy hook is called
function genericPostDeploy {
    echo "+====================================================="
    echo "| Container $HOSTNAME is running POST-DEPLOY HOOK"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    testAndRunSourceCodeScript "post-deploy" 
}

# function executed when pre-build hook is called
function genericPostBuild {
    echo "+====================================================="
    echo "| Container $HOSTNAME is running POST-BUILD HOOK"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    testAndRunSourceCodeScript "post-build" 
}

# function executed when assemble hook is called
function genericAssemble {
    echo "+====================================================="
    echo "| Container $HOSTNAME is running ASSEMBLE"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    echoVerbose "Fixing perm on /tmp/src"
    chown 1001:0 -R /tmp/src
    chmod g=u -R /tmp/src
    echoVerbose "Copy source from $APP_PATH/src > $APP_PATH"
    cp -R /tmp/src/* $APP_PATH/
    moveSourceCodeScripts /tmp/src $APP_PATH
    echoVerbose "Remove source temp $APP_PATH/src"
    rm -rf /tmp/src
    testAndRunSourceCodeScript "assemble" 
}

# function executed on container startup
function genericRun {
    echo "+====================================================="
    echo "| Container $HOSTNAME is RUNNING"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    if [[ -x $APP_PATH/run ]]; then
        echoVerbose "Execute main source code run script"
        exec $APP_PATH/run
    elif [[ -r $APP_PATH/.sx ]]; then
        echoVerbose "Found source code CI/CD scripts in .sx/"
        if [[ -r $APP_PATH/.sx/run ]]; then
            echoVerbose "Found source code sx run script"
            if [[ -x $APP_PATH/.sx/run ]]; then
                echo "Execute source code sx run script"
                exec $APP_PATH/.sx/run
            else
                echo "Start default daemon (source code sx run is script not executable)"
                startDaemon
            fi 
        else
            echo "Start default daemon (no source code run script)"
            startDaemon
        fi 
    else
        startDaemon
    fi 
}

# Display general usage
function genericUsage {
cat <<EOF
Basic OS container to execute arbitrary commands

Usage:
  docker run $SX_ID /bin/sx [command]

- General Commands:
  assemble         execute for building output image when using s2i 
  post-build       execute after building image
  pre-deploy       execute before the deployment begins (openshift).
  post-deploy      execute after the deployment strategy completes (openshift).
  run              execute the service on container startup
  health           return the service health
  usage            this message
  help             display information about this tools
  info             give information about the running container
  version          give the version of the running container
  daemon           execute the container as a daemon (keep alive)

EOF
exit 0;
}

# Display S2I usage
function genericUsageS2I {
cat <<EOF
Startx builder container to use with s2i or openshift

Usage:
  s2i $SX_ID <code_repo_url> â‰¤image_name>

Code repository must have a `run` script who will be executed on container startup

EOF
exit 0;
}

# Display general welcome message
function genericWelcome {
cat <<EOF
Welcome to the $SX_ID base image. If you see this message, you have
probably run this container without arguments. See usage for more informations.

docker run $SX_ID /bin/sx usage

EOF
exit 0;
}

# Display information
function displayInformation {
echoVerbose $1 "type      : $SX_TYPE"
echoVerbose $1 "service   : $SX_SERVICE"
echoVerbose $1 "image     : $SX_ID:$SX_VERSION"
echoVerbose $1 "name      : $SX_NAME"
echoVerbose $1 "OS        : $OS"
echoVerbose $1 "container : $HOSTNAME"
echoVerbose $1 "sx-lib    : v$SXLIB_VERSION"
}

# Display information
function genericAllInformation {
    displayInformation
    echoDebug `env`
}

# Display version
function genericVersion {
echo $SXDBTOOLS_VERSION
exit 0;
}

# Display liveness status
function genericIsLive {
echo "OK"
exit 0;
}

# Display readyness status
function genericIsReady {
    echo "OK"
    exit 0;
}

# start daemon
function startDaemon {
    while true; do
        if [ "$SX_VERBOSE" = true ] ; then
            echo "$HOSTNAME is alive and running $SX_ID:$SX_VERSION ($OS)"
        else
            echo "$HOSTNAME is alive"
        fi 
        sleep 10
    done
}

# Display daemon
function genericDaemon {
    echo "+====================================================="
    echo "| Container $HOSTNAME is RUNNING"
    echoVerbose "| "
    displayInformation "| "
    echo "+====================================================="
    startDaemon
}

# test if a source code script of the given type exist a could be run
function testAndRunSourceCodeScript {
    if [[ -r $APP_PATH/.sx ]]; then
        echoVerbose "Found source code CI/CD scripts in .sx/"
        if [[ -r $APP_PATH/.sx/$1 ]]; then
            echoVerbose "Found source code $1 script"
            if [[ -x $APP_PATH/.sx/$1 ]]; then
                echo "Execute source code $1 script"
                . $APP_PATH/.sx/$1
            else
                echo "WARN: source code $1 script is not executable"
            fi 
        else
            echoVerbose "No source code $1 script"
        fi 
    else
        echoVerbose "no source code .sx directory"
    fi 
}


function moveSourceCodeScripts {
    if [[ -r $1/.sx ]]; then
        echoVerbose "Copy source scripts from $APP_PATH/src > $APP_PATH"
        chown 1001:0 -R $1/.sx
        chmod g=u -R $1/.sx
        chmod ug+x -R $1/.sx/*
        mv $1/.sx $2/.sx
    fi
}