#!/bin/bash
source $SX_LIBDIR/sx

function check_firefox_environment {
    if [ ! -v APP_PATH ]; then
        APP_PATH="/home/firefox"
        export APP_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/home/firefox"
        export LOG_PATH
    fi
    if [ ! -n "$SERVER_NAME" ]; then
        SERVER_NAME="localhost"
        export SERVER_NAME
    fi
}

# Display firefox information
function firefoxInformation {
    displayInformation $1 
    echoVerbose $1 "app path  : $APP_PATH"
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "firefox   : $(firefox --version)" 
    echoVerbose $1 "resolution: $SX_FIREFOX_SCREEN_RES_X" 
}

# function executed when build hook is called
function firefoxBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Firefox BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Firefox BUILD"
    echoVerbose "| "
    firefoxInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doFirefoxBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build source code found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build source code found at $MYS2I_DEST/assemble"
    fi
    exit 0;
}

# function performing Firefox build actions
function doFirefoxBuild {
    doGenericBuild
    echoNotVerbose "Build Firefox"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Build Firefox"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function firefoxPostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Firefox POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Firefox POST-BUILD"
    echoVerbose "| "
    firefoxInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doFirefoxPostBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild source code found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild source code found at $MYS2I_DEST/post-build"
    fi
    exit 0;
}

# function performing Firefox post-build actions
function doFirefoxPostBuild {
    doGenericPostBuild
    echoNotVerbose "PostBuild Firefox"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostBuild Firefox"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function firefoxPreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Firefox PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Firefox PRE-DEPLOY"
    echoVerbose "| "
    firefoxInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doFirefoxPreDeploy
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy source code found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy source code found at $MYS2I_DEST/pre-deploy"
    fi
    exit 0;
}

# function performing Firefox pre-deploy actions
function doFirefoxPreDeploy {
    doGenericPreDeploy
    echoNotVerbose "PreDeploy Firefox"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PreDeploy Firefox"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function firefoxPostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Firefox POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Firefox POST-DEPLOY"
    echoVerbose "| "
    firefoxInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doFirefoxPostDeploy
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy source code found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy source code found at $MYS2I_DEST/post-deploy"
    fi
    exit 0;
}

# function performing Firefox post-deploy actions
function doFirefoxPostDeploy {
    doGenericPostDeploy
    echoNotVerbose "PostDeploy Firefox"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostDeploy Firefox"
    echoVerbose "+====================================================="
}

# function executed on container startup
function firefoxRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Firefox RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Firefox RUN"
    echoVerbose "| "
    firefoxInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run source code found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run source code found at $MYS2I_DEST/run"
        echoVerbose "Executing default Firefox run action"
        doFirefoxRun
    fi
}

# function performing Firefox run actions
function doFirefoxRun {
    echoNotVerbose "Run Firefox"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Run Firefox"
    echoVerbose "+====================================================="
    startFirefoxService
}

# Display liveness status
function firefoxIsLive {
    genericIsLive
}

# Display readyness status
function firefoxIsReady {
    R=`ps -aux | grep firefox | wc -l`
    if [ "$R" -ge "2" ]; then
      echo "OK";
      exit 0;
    else 
      echo "Not OK";
      exit 1;
    fi;
}

# function executed on firefox service stop
function stopFirefoxHandler {
    killall firefox
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    firefoxInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# Start the httpd server as a deamon and execute it inside 
# the running shell
function startFirefoxService {
    trap 'kill ${!}; stopFirefoxHandler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    exec /usr/bin/supervisord -c $SX_FIREFOX_SUPERVISOR_CONF/supervisord.conf
}