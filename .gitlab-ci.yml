
# Stagging for this pipeline
stages:
  - "build"


docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker images
    - "./travis/prepare-begin      fedora                   latest         rawhide"
    - "./travis/prepare-docker     fedora                   latest         rawhide"
    - "./travis/prepare-dockerhub  fedora                   latest         rawhide"
    - "./travis/prepare-cache      fedora                   latest         rawhide"
    - "./travis/prepare-end        fedora                   latest         rawhide"
    # - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile























# # This is the GitLab CI/CD configuration file for sxcm kubernetes cluster manager.
# #
# # For more information, see: https://sxcm.readthedocs.io

# # Global environment variables
# variables:
#   SXGLCI_GIT_DOMAIN: gitlab.com
#   SXGLCI_GIT_SSH_USER: git@gitlab.com
#   SX_VERBOSE: "true"
#   SX_DEBUG: "true"

# # Default container image
# image: "quay.io/startx/runner-bash:alpine3"

# # Include library
# include:
#   - template: Security/SAST.gitlab-ci.yml

# # Stagging for this pipeline
# stages:
#   - "context check"
#   - "syntax check"
#   - "test"
#   - "auto merge"

# ##
# ## LIBRARY
# ##

# # Library used to merge branch in a local repo
# .git-merge:
#   variables:
#     SXGLCI_BRANCH_FROM: 'devel' # default to devel branch
#     SXGLCI_BRANCH_TO: 'main' # default to main branch
#   before_script: 
#     - |
#       #!/bin/bash
#       echo "======== Configuration of git repository"
#       if [[ $SX_DEBUG == true ]]; then
#         git config user.email "devops@startx.fr"
#         git config user.name "STARTX Gitlab-CI"
#         git config fetch.recurseSubmodules true
#         git config advice.detachedHead false
#       else
#         git config user.email "devops@startx.fr" &> /dev/null
#         git config user.name "STARTX Gitlab-CI" &> /dev/null
#         git config fetch.recurseSubmodules true &> /dev/null
#         git config advice.detachedHead false &> /dev/null
#       fi
#       echo "======== Configuration of SSH key"
#       if [[ $SX_DEBUG == true ]]; then
#         eval $(ssh-agent -s)
#         mkdir -p ~/.ssh && chmod 740 ~/.ssh
#         echo $SXGLCI_GITSSH_PRIVB64 | base64 -d > ~/.ssh/sxcm-gitlabci.id_ecdsa
#         chmod 600 ~/.ssh/sxcm-gitlabci.id_ecdsa
#         ssh-add ~/.ssh/sxcm-gitlabci.id_ecdsa
#         $(ssh-keyscan $SXGLCI_GIT_DOMAIN >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts)
#       else
#         eval $(ssh-agent -s) &> /dev/null
#         mkdir -p ~/.ssh && chmod 740 ~/.ssh
#         echo $SXGLCI_GITSSH_PRIVB64 | base64 -d > ~/.ssh/sxcm-gitlabci.id_ecdsa
#         chmod 600 ~/.ssh/sxcm-gitlabci.id_ecdsa
#         ssh-add ~/.ssh/sxcm-gitlabci.id_ecdsa &> /dev/null
#         $(ssh-keyscan $SXGLCI_GIT_DOMAIN >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts)
#       fi
#       echo "======== Configuration of remote push to ${SXGLCI_GIT_SSH_USER}:${CI_PROJECT_PATH}.git"
#       if [[ $SX_DEBUG == true ]]; then
#         git remote set-url origin ${SXGLCI_GIT_SSH_USER}:${CI_PROJECT_PATH}.git
#         git fetch origin
#       else
#         git remote set-url origin ${SXGLCI_GIT_SSH_USER}:${CI_PROJECT_PATH}.git
#         git fetch origin &> /dev/null
#       fi
#   script: |
#     #!/bin/bash
#     echo "======== Checkout branch $SXGLCI_BRANCH_FROM"
#     if [[ $SX_DEBUG == true ]]; then
#       git checkout $SXGLCI_BRANCH_FROM
#     else
#       git checkout $SXGLCI_BRANCH_FROM &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not find origin branch $SXGLCI_BRANCH_FROM" && exit 1
#     fi
#     echo "======== Checkout branch $SXGLCI_BRANCH_TO"
#     if [[ $SX_DEBUG == true ]]; then
#       git checkout --track origin/$SXGLCI_BRANCH_TO && \
#       git checkout $SXGLCI_BRANCH_TO && \
#       git pull
#     else
#       git checkout --track origin/$SXGLCI_BRANCH_TO &> /dev/null && \
#       git checkout $SXGLCI_BRANCH_TO &> /dev/null && \
#       git pull &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not find destination branch $SXGLCI_BRANCH_TO" && exit 1
#     fi
#     echo "======== Merge branch $SXGLCI_BRANCH_FROM into $SXGLCI_BRANCH_TO"
#     if [[ $SX_DEBUG == true ]]; then
#       git merge --no-ff $SXGLCI_BRANCH_FROM
#     else
#       git merge --no-ff $SXGLCI_BRANCH_FROM &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not automaticaly merge branch $SXGLCI_BRANCH_FROM into $SXGLCI_BRANCH_TO" && exit 1
#     fi
#     echo "======== Push branch $SXGLCI_BRANCH_TO into ${SXGLCI_GIT_SSH_USER}:${CI_PROJECT_PATH}.git"
#     if [[ $SX_DEBUG == true ]]; then
#       git push origin $SXGLCI_BRANCH_TO
#     else
#       git push origin $SXGLCI_BRANCH_TO &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not automaticaly push branch $SXGLCI_BRANCH_TO"
#       exit 1
#     fi

# ##
# ## STAGES
# ##

# # Debug stage, used when developping the ci/cd chain
# debug:
#   stage: "context check"
#   script: |
#     #!/bin/bash
#     VS_PYTHON=$(python3 --version)
#     MDL_PYTHON=$(mdl --version)
#     SS_PYTHON=$(shellcheck --version)
#     DDSIZE=$(du -sh .)
#     if [[ $SX_DEBUG == true ]]; then
#     cat <<EOF
#     ======== DEBUG
#     python version     : $VS_PYTHON
#     mdl version        : $MDL_PYTHON
#     shellcheck version : $SS_PYTHON
#     directory size     : $DDSIZE
#     EOF
#     else
#     cat <<EOF
#     ======== DEBUG
#     python version     : $VS_PYTHON
#     directory size     : $DDSIZE
#     EOF
#     fi
#   only:
#     - devel

# # Info stage, used to get the execution context
# info:
#   stage: "context check"
#   image: "busybox:latest"
#   script: |
#     #!/bin/bash
#     if [[ $SX_DEBUG == true ]]; then
#     cat <<EOF
#     ======== USER INFO
#     ID         : $GITLAB_USER_ID
#     e-mail     : $GITLAB_USER_EMAIL
#     Username   : $GITLAB_USER_NAME
    
#     ======== SERVER INFO
#     Hostname   : $HOSTNAME
#     Runner     : $CI_RUNNER_DESCRIPTION
#     Arch       : $CI_RUNNER_EXECUTABLE_ARCH
#     Version    : $CI_RUNNER_VERSION ($CI_SERVER_REVISION)
#     Image      : $CI_JOB_IMAGE
    
#     ======== PROJECT INFO
#     Namespace  : $CI_PROJECT_ROOT_NAMESPACE
#     Name       : $CI_PROJECT_TITLE
#     Path       : $CI_PROJECT_PATH ($CI_PROJECT_VISIBILITY)
#     URL        : $CI_PROJECT_URL
#     Language   : $CI_PROJECT_REPOSITORY_LANGUAGES
#     Labels     : $CI_PROJECT_CLASSIFICATION_LABEL
    
#     ======== JOB INFO
#     ID         : $CI_JOB_NAME ($CI_JOB_ID)
#     Started    : $CI_JOB_STARTED_AT
#     Pipeline   : $CI_PIPELINE_ID ($CI_PIPELINE_CREATED_AT)
#     URL        : $CI_PIPELINE_URL
#     Language   : $CI_PROJECT_REPOSITORY_LANGUAGES
#     Labels     : $CI_PROJECT_CLASSIFICATION_LABEL
    
#     ======== COMMIT INFO
#     Previous   : $CI_COMMIT_BEFORE_SHA
#     Current    : $CI_COMMIT_SHA
#     Date       : $CI_COMMIT_TIMESTAMP
#     Branch     : $CI_COMMIT_BRANCH
#     Autor      : $CI_COMMIT_AUTHOR
#     Title      : $CI_COMMIT_TITLE
#     EOF
#     else
#     cat <<EOF
#     User info  : $GITLAB_USER_ID ($GITLAB_USER_EMAIL)
#     Runner     : $HOSTNAME ($CI_RUNNER_EXECUTABLE_ARCH : CI_RUNNER_VERSION ($CI_SERVER_REVISION))
#     Image      : $CI_JOB_IMAGE
#     Project    : $CI_PROJECT_ROOT_NAMESPACE ($CI_PROJECT_PATH ($CI_PROJECT_VISIBILITY))
#     Job ID     : $CI_JOB_NAME ($CI_JOB_ID) - started at $CI_JOB_STARTED_AT
#     Pipeline   : $CI_PIPELINE_ID ($CI_PIPELINE_CREATED_AT)
#     Commit     : $CI_COMMIT_SHA - at $CI_COMMIT_TIMESTAMP
#     Branch     : $CI_COMMIT_BRANCH
#     Autor      : $CI_COMMIT_AUTHOR
#     Title      : $CI_COMMIT_TITLE
#     EOF
#     fi
#   only:
#     - devel
#     - main

# # Check stage, used to check for good context
# requirements:
#   stage: "context check"
#   image: "busybox:latest"
#   script: |
#     #!/bin/bash
#     if [[ -f LICENSE ]]; then 
#       echo "LICENSE found"; 
#     else 
#       echo "NO LICENSE found"; 
#       exit 1; 
#     fi
#     if [[ -f README.md ]]; then 
#       echo "README.md found"; 
#     else 
#       echo "NO README.md found"; 
#       exit 1; 
#     fi
#     if [[ -f installer ]]; then 
#       echo "installer found"; 
#       if [[ -x installer ]]; then 
#         echo "installer executable"; 
#       else 
#         echo "Could not execute installer"; 
#         exit 1; 
#       fi
#     else 
#       echo "NO installer found"; 
#       exit 1; 
#     fi
#   only:
#     - devel
#     - main
#     - stable

# # First stage; all branches
# markdown:
#   stage: "syntax check"
#   script: |
#     #!/bin/bash
#     mdl --skip-default-ruleset *.md
#   only:
#     - devel
#     - main
#     - stable
# shell:
#   stage: "syntax check"
#   script: "shellcheck installer"
#   only:
#     - devel
#     - main
#     - stable

# #Second stage; only dev branch
# bats:
#   stage: "test"
#   script: "cd tests && ./start.sh"
#   only:
#     - devel
#     - main
#     - stable

# ## Merge branches

# # Merge the main branch
# merge-main:
#   stage: "auto merge"
#   extends: .git-merge
#   variables:
#     SXGLCI_BRANCH_FROM: 'devel'
#     SXGLCI_BRANCH_TO: 'main'
#   only:
#     - devel

# # Merge the stable branch
# merge-stable:
#   stage: "auto merge"
#   extends: .git-merge
#   variables:
#     SXGLCI_BRANCH_FROM: 'main'
#     SXGLCI_BRANCH_TO: 'stable'
#   only:
#     - main

# # Merge the version tag
# merge-version:
#   stage: "auto merge"
#   extends: .git-merge
#   variables:
#     SXGLCI_BRANCH_FROM: 'stable' # default to stable branch
#   script: |
#     #!/bin/bash
#     echo "======== Checkout branch $SXGLCI_BRANCH_FROM"
#     if [[ $SX_DEBUG == true ]]; then
#       git checkout $SXGLCI_BRANCH_FROM
#     else
#       git checkout $SXGLCI_BRANCH_FROM &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not find origin branch $SXGLCI_BRANCH_FROM" && exit 1
#     fi
#     echo "======== Checking tags for repository ${CI_PROJECT_PATH}"
#     git tag | tail -n 1 > /tmp/last
#     if [[ $? != 0 ]]; then
#       echo "!! Could not last tag for this repository" && exit 1
#     fi
#     SXGLCI_LAST_TAG=`cat /tmp/last`
#     echo "== Found $SXGLCI_LAST_TAG as last tag"
#     source installer
#     eval x=$(git tag | tail -n 1 | grep $SXCM_INSTALLER_VERSION)
#     if [[ $x != "" ]]; then
#       echo "!! Tag $SXCM_INSTALLER_VERSION already exist" && exit 0
#     fi
#     echo "== Tag $SXCM_INSTALLER_VERSION doesn't exist"
#     echo "======== Checkout to tag $SXGLCI_LAST_TAG"
#     if [[ $SX_DEBUG == true ]]; then
#       git checkout $SXGLCI_LAST_TAG
#       git pull origin $SXGLCI_LAST_TAG
#     else
#       git checkout $SXGLCI_LAST_TAG &> /dev/null
#       git pull origin $SXGLCI_LAST_TAG &> /dev/null
#     fi
#     echo "======== Merge branch $SXGLCI_BRANCH_FROM into $SXGLCI_LAST_TAG (release $SXCM_INSTALLER_VERSION)"
#     if [[ $SX_DEBUG == true ]]; then
#       git merge --no-ff $SXGLCI_BRANCH_FROM
#     else
#       git merge --no-ff $SXGLCI_BRANCH_FROM &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not automaticaly merge branch $SXGLCI_BRANCH_FROM into $SXGLCI_LAST_TAG for release $SXCM_INSTALLER_VERSION" && exit 1
#     fi
#     echo "======== Tag $SXCM_INSTALLER_VERSION after merging $SXGLCI_BRANCH_FROM into $SXGLCI_LAST_TAG"
#     if [[ $SX_DEBUG == true ]]; then
#       git tag $SXCM_INSTALLER_VERSION
#     else
#       git tag $SXCM_INSTALLER_VERSION &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not create tag $SXCM_INSTALLER_VERSION" && exit 1
#     fi
#     echo "======== Push tag $SXCM_INSTALLER_VERSION"
#     if [[ $SX_DEBUG == true ]]; then
#       git push origin $SXCM_INSTALLER_VERSION
#     else
#       git push origin $SXCM_INSTALLER_VERSION &> /dev/null
#     fi
#     if [[ $? != 0 ]]; then
#       echo "!! Could not automaticaly push branch $SXCM_INSTALLER_VERSION" && exit 1
#     fi
#   only:
#     - stable

