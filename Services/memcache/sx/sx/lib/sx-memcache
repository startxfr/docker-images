#!/bin/bash
source $SX_LIBDIR/sx

function check_memcache_environment {
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
}

function memcacheInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "memcache  : $(memcached -h | head -1)"
    echoVerbose $1 "log path  : $LOG_PATH"
}

function displayMemcacheRunInformation {
    memcacheInformation $1
    echoVerbose $1 "admin     : root:$MYSQL_ROOT_PASSWORD"
    echo $1 "user      : $MYSQL_USER:$MYSQL_PASSWORD"
    echo $1 "database  : $MYSQL_DATABASE"
}

# function executed when build hook is called
function memcacheBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Memcache BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Memcache BUILD"
    echoVerbose "| "
    memcacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMemcacheBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build source code found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build source code found at $MYS2I_DEST/assemble"
    fi
    exit 0;
}

# function performing Memcache build actions
function doMemcacheBuild {
    doGenericBuild
    echoNotVerbose "Build Memcache actions"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "Build Memcache actions"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function memcachePostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Memcache POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Memcache POST-BUILD"
    echoVerbose "| "
    memcacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMemcachePostBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild source code found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild source code found at $MYS2I_DEST/post-build"
    fi
    exit 0;
}

# function performing Memcache post-build actions
function doMemcachePostBuild {
    doGenericPostBuild
    echoNotVerbose "PostBuild Memcache actions"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PostBuild Memcache actions"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function memcachePreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Memcache PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Memcache PRE-DEPLOY"
    echoVerbose "| "
    memcacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMemcachePreDeploy
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy source code found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy source code found at $MYS2I_DEST/pre-deploy"
    fi
    exit 0;
}

# function performing Memcache pre-deploy actions
function doMemcachePreDeploy {
    doGenericPreDeploy
    echoNotVerbose "PreDeploy Memcache actions"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PreDeploy Memcache actions"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function memcachePostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Memcache POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Memcache POST-DEPLOY"
    echoVerbose "| "
    memcacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMemcachePostDeploy
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy source code found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy source code found at $MYS2I_DEST/post-deploy"
    fi
    exit 0;
}

# function performing Memcache post-deploy actions
function doMemcachePostDeploy {
    doGenericPostDeploy
    echoNotVerbose "PostDeploy Memcache actions"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PostDeploy Memcache actions"
    echoVerbose "+====================================================="
}

# function executed on container startup
function memcacheRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Memcache RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Memcache RUN"
    echoVerbose "| "
    memcacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run source code found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run source code found at $MYS2I_DEST/run"
        echoVerbose "Executing default Memcache run action"
        doMemcacheRun
    fi
}

# function performing Memcache run actions
function doMemcacheRun {
    echoNotVerbose "Run Memcache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "Run Memcache"
    echoVerbose "+====================================================="
    startMemcacheService
}

# Display liveness status
function memcacheIsLive {
    genericIsLive
}

# Display readyness status
function memcacheIsReady {
    genericIsReady
}

function stop_memcache_handler {
    killall memcached
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# Start the memcache server as a deamon and execute it inside 
# the running shell
function startMemcacheService {
    trap 'kill ${!}; stop_memcache_handler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    exec memcached -u daemon -v
}
