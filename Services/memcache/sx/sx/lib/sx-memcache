#!/bin/bash
source $SX_LIBDIR/sx

function check_memcache_environment {
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
}

function memcacheInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "memcache  : $(memcached -h | head -1)"
    echoVerbose $1 "log path  : $LOG_PATH"
}

function displayMemcacheRunInformation {
    memcacheInformation $1
    echoVerbose $1 "admin     : root:$MYSQL_ROOT_PASSWORD"
    echo $1 "user      : $MYSQL_USER:$MYSQL_PASSWORD"
    echo $1 "database  : $MYSQL_DATABASE"
}

function memcachePreDeploy {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running PRE-DEPLOY HOOK"
    echoNotVerbose "container $HOSTNAME  running PRE-DEPLOY HOOK"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "pre-deploy" 
}

function memcachePostDeploy {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running POST-DEPLOY HOOK"
    echoNotVerbose "container $HOSTNAME  running POST-DEPLOY HOOK"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "post-deploy" 
}

function memcachePostBuild {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running POST-BUILD HOOK"
    echoNotVerbose "container $HOSTNAME  running POST-BUILD HOOK"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    testAndRunSourceCodeScript "post-build" 
}

function memcacheAssemble {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME  running ASSEMBLE"
    echoNotVerbose "container $HOSTNAME  running ASSEMBLE"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    if [[ -d $S2I_DEST ]]; then
      echoVerbose "Fixing perm on $S2I_DEST"
      chown 1001:0 -R $S2I_DEST
      chmod g=u -R $S2I_DEST
      moveSourceCode $S2I_DEST $APP_PATH
    fi;
    testAndRunSourceCodeScript "assemble" 
}

function memcacheRun {
    genericHeader
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is RUNNING"
    echoNotVerbose "container $HOSTNAME is RUNNING"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    startMemcacheService
}

# Display liveness status
function memcacheIsLive {
    genericIsLive
}

# Display readyness status
function memcacheIsReady {
    genericIsReady
}

function stop_memcache_handler {
    killall memcached
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    memcacheInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# Start the memcache server as a deamon and execute it inside 
# the running shell
function startMemcacheService {
    trap 'kill ${!}; stop_memcache_handler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    exec memcached -u daemon -v
}
