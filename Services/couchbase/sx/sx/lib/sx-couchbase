#!/bin/bash
source $SX_LIBDIR/sx

function check_couchbase_environment {
    if [ ! -v DATA_PATH ]; then
        DATA_PATH="/data"
        export DATA_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/var/log/couchbase"
        export LOG_PATH
    fi
}

function couchbaseInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "engine    : v$CB_VERSION"
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "data path : $DATA_PATH"
}

function displayCouchbaseRunInformation {
    couchbaseInformation $1
    echoVerbose $1 "admin     : $COUCHBASE_USER:$COUCHBASE_PASSWORD"
    echo $1 "database  : $COUCHBASE_BUCKETS"
}

# function executed when build hook is called
function couchbaseBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Couchbase BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Couchbase BUILD"
    echoVerbose "| "
    couchbaseInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    doInitS2iApp
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build application logic found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build application logic found at $MYS2I_DEST/assemble"
        doCouchbaseBuild
    fi
    exit 0;
}

# function performing Couchbase build actions
function doCouchbaseBuild {
    doGenericBuild
    echoNotVerbose "Executing Couchbase build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Couchbase build logic"
    echoVerbose "+====================================================="
    initCreateDefaultDirectoryStructure
}

# function executed when post-build hook is called
function couchbasePostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Couchbase POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Couchbase POST-BUILD"
    echoVerbose "| "
    couchbaseInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild application logic found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild application logic found at $MYS2I_DEST/post-build"
        doCouchbasePostBuild
    fi
    exit 0;
}

# function performing Couchbase post-build actions
function doCouchbasePostBuild {
    doGenericPostBuild
    echoNotVerbose "Executing Couchbase post-build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Couchbase post-build logic"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function couchbasePreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Couchbase PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Couchbase PRE-DEPLOY"
    echoVerbose "| "
    couchbaseInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
        doCouchbasePreDeploy
    fi
    exit 0;
}

# function performing Couchbase pre-deploy actions
function doCouchbasePreDeploy {
    doGenericPreDeploy
    echoNotVerbose "Executing Couchbase pre-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Couchbase pre-deploy logic"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function couchbasePostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Couchbase POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Couchbase POST-DEPLOY"
    echoVerbose "| "
    couchbaseInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy application logic found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy application logic found at $MYS2I_DEST/post-deploy"
        doCouchbasePostDeploy
    fi
    exit 0;
}

# function performing Couchbase post-deploy actions
function doCouchbasePostDeploy {
    doGenericPostDeploy
    echoNotVerbose "Executing Couchbase post-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Couchbase post-deploy logic"
    echoVerbose "+====================================================="
}

function couchbaseRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Couchbase RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Couchbase RUN"
    echoVerbose "| "
    couchbaseInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run application logic found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run application logic found at $MYS2I_DEST/run"
        echoVerbose "Executing default Couchbase run action"
        doCouchbaseRun
    fi
}

# function performing Couchbase run actions
function doCouchbaseRun {
    echoNotVerbose "Executing Couchbase run logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Couchbase run logic"
    echoVerbose "+====================================================="
    startCouchbaseService
}

# Display liveness status
function couchbaseIsLive {
    genericIsLive
}

# Display readyness status
function couchbaseIsReady {
    genericIsReady
}

function stopCouchbaseHandler {
    /opt/couchbase/bin/couchbase-server -k
    stopDaemon
}

# Start the couchbase server as a deamon and execute it inside 
# the running shell
function startCouchbaseService {
    exec 2>&1
    cd $DATA_PATH
    initCreateDefaultDirectoryStructure
    trap 'stopCouchbaseHandler' SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGTRAP SIGBUS SIGUSR1 SIGUSR2 SIGFPE SIGPIPE SIGALRM SIGSTOP
    trap 'killDaemon kill 9' SIGKILL
    trap 'killDaemon term 15' SIGTERM
    trap 'killDaemon sys 31' SIGSYS
    exec /opt/couchbase/bin/couchbase-server -- -kernel global_enable_tracing false -noinput
    sleep 10
}


function initCreateDefaultDirectoryStructure {
    if [[ ! -d $DATA_PATH/lib/couchbase ]]; then
        echoVerbose "Creating basic data structure in $DATA_PATH"
        mkdir -p $DATA_PATH/lib/couchbase/config \
                 $DATA_PATH/lib/couchbase/data \
                 $DATA_PATH/lib/couchbase/stats \
                 $DATA_PATH/lib/couchbase/logs \
                 $DATA_PATH/lib/moxi
        touch $DATA_PATH/.keep
    fi
    chown -R couchbase:0 $DATA_PATH 2&> /dev/null
    chmod -R g=u $DATA_PATH 2&> /dev/null
}
