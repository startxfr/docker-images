#!/bin/bash
source $SX_LIBDIR/sx

set_listen_addresses() {
	sedEscapedValue="$(echo "$1" | sed 's/[\/&]/\\&/g')"
	[ -w $POSTGRESQL_CONF ] && sed -ri "s/^#?(listen_addresses\s*=\s*)\S+/\1'$sedEscapedValue'/" "$POSTGRESQL_CONF"
}


function check_postgres_environment {
    if [ -z "$DATA_PATH" ]; then
        DATA_PATH="/data"
        export DATA_PATH
    fi
    if [ -z "$LOG_PATH" ]; then
        LOG_PATH="/var/log/postgres"
        export LOG_PATH
    fi
}

function postgresInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "engine    : $(postgres -V | head -1)"
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "data path : $DATA_PATH"
}

function displayPostgresRunInformation {
    postgresInformation $1
    echoVerbose $1 "admin     : root:$PGSQL_ROOT_PASSWORD"
    echo $1 "user      : $PGSQL_USER:$PGSQL_PASSWORD"
    echo $1 "database  : $PGSQL_DATABASE"
}

# function executed when build hook is called
function postgresBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres BUILD"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    doInitS2iApp
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build application logic found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build application logic found at $MYS2I_DEST/assemble"
    doPostgresBuild
    fi
    exit 0;
}

# function performing Postgres build actions
function doPostgresBuild {
    doGenericBuild
    echoNotVerbose "Executing Postgres build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Postgres build logic"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function postgresPostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres POST-BUILD"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild application logic found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild application logic found at $MYS2I_DEST/post-build"
    doPostgresPostBuild
    fi
    exit 0;
}

# function performing Postgres post-build actions
function doPostgresPostBuild {
    doGenericPostBuild
    echoNotVerbose "Executing Postgres post-build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Postgres post-build logic"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function postgresPreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres PRE-DEPLOY"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
    doPostgresPreDeploy
    fi
    exit 0;
}

# function performing Postgres pre-deploy actions
function doPostgresPreDeploy {
    doGenericPreDeploy
    echoNotVerbose "Executing Postgres pre-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Postgres pre-deploy logic"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function postgresPostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres POST-DEPLOY"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy application logic found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy application logic found at $MYS2I_DEST/post-deploy"
    doPostgresPostDeploy
    fi
    exit 0;
}

# function performing Postgres post-deploy actions
function doPostgresPostDeploy {
    doGenericPostDeploy
    echoNotVerbose "Executing Postgres post-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Postgres post-deploy logic"
    echoVerbose "+====================================================="
}

# function executed on container startup
function postgresRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres RUN"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run application logic found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run application logic found at $MYS2I_DEST/run"
        echoVerbose "Executing default Postgres run action"
        doPostgresRun
    fi
}

# function performing Postgres run actions
function doPostgresRun {
    echoNotVerbose "Executing Postgres run logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Postgres run logic"
    echoVerbose "+====================================================="
    startPostgresService
}

# Display liveness status
function postgresIsLive {
    genericIsLive
}

# Display readyness status
function postgresIsReady {
    genericIsReady
}

function stopPostgresHandler {
    postgres -c "pg_ctl stop -D $DATA_PATH -w"
    stopDaemon
}

# Start the postgres server as a deamon and execute it inside 
# the running shell
function startPostgresService {
    trap 'stopPostgresHandler' SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGTRAP SIGBUS SIGUSR1 SIGUSR2 SIGFPE SIGPIPE SIGALRM SIGSTOP
    trap 'killDaemon kill 9' SIGKILL
    trap 'killDaemon term 15' SIGTERM
    trap 'killDaemon sys 31' SIGSYS
    initdb $DATA_PATH
    exec pg_ctl start -w -D $DATA_PATH
}
