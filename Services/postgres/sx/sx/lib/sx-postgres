#!/bin/bash
source $SX_LIBDIR/sx

set_listen_addresses() {
	sedEscapedValue="$(echo "$1" | sed 's/[\/&]/\\&/g')"
	sed -ri "s/^#?(listen_addresses\s*=\s*)\S+/\1'$sedEscapedValue'/" "$POSTGRESQL_CONF"
}


function check_postgres_environment {
    if [ ! -v DATA_PATH ]; then
        DATA_PATH="/data"
        export DATA_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
}

function postgresInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "engine    : $(postgres -V | head -1)"
    echoVerbose $1 "sql path  : $LOADSQL_PATH"
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "data path : $DATA_PATH"
}

function displayPostgresRunInformation {
    postgresInformation $1
    echoVerbose $1 "admin     : root:$PGSQL_ROOT_PASSWORD"
    echo $1 "user      : $PGSQL_USER:$PGSQL_PASSWORD"
    echo $1 "database  : $PGSQL_DATABASE"
}

# function executed when build hook is called
function postgresBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres BUILD"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doPostgresBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build source code found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build source code found at $MYS2I_DEST/assemble"
    fi
    exit 0;
}

# function performing Postgres build actions
function doPostgresBuild {
    doGenericBuild
    echoNotVerbose "Build Postgres"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "Build Postgres"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function postgresPostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres POST-BUILD"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doPostgresPostBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild source code found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild source code found at $MYS2I_DEST/post-build"
    fi
    exit 0;
}

# function performing Postgres post-build actions
function doPostgresPostBuild {
    doGenericPostBuild
    echoNotVerbose "PostBuild Postgres"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PostBuild Postgres"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function postgresPreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres PRE-DEPLOY"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doPostgresPreDeploy
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy source code found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy source code found at $MYS2I_DEST/pre-deploy"
    fi
    exit 0;
}

# function performing Postgres pre-deploy actions
function doPostgresPreDeploy {
    doGenericPreDeploy
    echoNotVerbose "PreDeploy Postgres"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PreDeploy Postgres"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function postgresPostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres POST-DEPLOY"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doPostgresPostDeploy
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy source code found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy source code found at $MYS2I_DEST/post-deploy"
    fi
    exit 0;
}

# function performing Postgres post-deploy actions
function doPostgresPostDeploy {
    doGenericPostDeploy
    echoNotVerbose "PostDeploy Postgres"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "PostDeploy Postgres"
    echoVerbose "+====================================================="
}

# function executed on container startup
function postgresRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Postgres RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Postgres RUN"
    echoVerbose "| "
    postgresInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run source code found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run source code found at $MYS2I_DEST/run"
        echoVerbose "Executing default Postgres run action"
        doPostgresRun
    fi
}

# function performing Postgres run actions
function doPostgresRun {
    echoNotVerbose "Run Postgres"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "Run Postgres"
    echoVerbose "+====================================================="
    startPostgresService
}

# Display liveness status
function postgresIsLive {
    genericIsLive
}

# Display readyness status
function postgresIsReady {
    genericIsReady
}

function stop_postgres_handler {
    postgres -c "pg_ctl stop -D $DATA_PATH -w"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    postgresInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# Start the postgres server as a deamon and execute it inside 
# the running shell
function startPostgresService {
    trap 'kill ${!}; stop_postgres_handler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    initdb $DATA_PATH
    exec pg_ctl start -w -D $DATA_PATH
    startDaemon
}
