#!/bin/bash
source $SX_LIBDIR/sx

function check_apache_environment {
    if [ ! -v APP_PATH ]; then
        APP_PATH="/app"
        export APP_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
    if [ ! -n "$SERVER_NAME" ]; then
        SERVER_NAME="localhost"
        export SERVER_NAME
    fi
}

# Display apache information
function apacheInformation {
    displayInformation $1 
    echoVerbose $1 "app path  : $APP_PATH"
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "httpd     : $(httpd -v | head -1)" 
}

# function executed when build hook is called
function apacheBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Apache BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Apache BUILD"
    echoVerbose "| "
    apacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doApacheBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build source code found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build source code found at $MYS2I_DEST/assemble"
    fi
    exit 0;
}

# function performing Apache build actions
function doApacheBuild {
    doGenericBuild
    echoNotVerbose "Build Apache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Build Apache"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function apachePostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Apache POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Apache POST-BUILD"
    echoVerbose "| "
    apacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doApachePostBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild source code found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild source code found at $MYS2I_DEST/post-build"
    fi
    exit 0;
}

# function performing Apache post-build actions
function doApachePostBuild {
    doGenericPostBuild
    echoNotVerbose "PostBuild Apache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostBuild Apache"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function apachePreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Apache PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Apache PRE-DEPLOY"
    echoVerbose "| "
    apacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doApachePreDeploy
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy source code found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy source code found at $MYS2I_DEST/pre-deploy"
    fi
    exit 0;
}

# function performing Apache pre-deploy actions
function doApachePreDeploy {
    doGenericPreDeploy
    echoNotVerbose "PreDeploy Apache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PreDeploy Apache"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function apachePostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Apache POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Apache POST-DEPLOY"
    echoVerbose "| "
    apacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doApachePostDeploy
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy source code found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy source code found at $MYS2I_DEST/post-deploy"
    fi
    exit 0;
}

# function performing Apache post-deploy actions
function doApachePostDeploy {
    doGenericPostDeploy
    echoNotVerbose "PostDeploy Apache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostDeploy Apache"
    echoVerbose "+====================================================="
    setSys2HttpEnvironmentVariable
}

# function executed on container startup
function apacheRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Apache RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Apache RUN"
    echoVerbose "| "
    apacheInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run source code found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run source code found at $MYS2I_DEST/run"
        echoVerbose "Executing default Apache run action"
        doApacheRun
    fi
}

# function performing Apache run actions
function doApacheRun {
    echoNotVerbose "Run Apache"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Run Apache"
    echoVerbose "+====================================================="
    startApacheService
}

# Display liveness status
function apacheIsLive {
    R=`curl -sL -w "%{http_code}\\n" "http://localhost/" -o /dev/null`
    if [ "$R" = "200" ]; then
      echo "OK";
      exit 0;
    else 
      echo "Not OK";
      exit 1;
    fi;
}

# Display readyness status
function apacheIsReady {
    genericIsReady
}

# function executed on apache service stop
function stopApacheHandler {
    killall httpd
    rm -rf /run/httpd/*
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    apacheInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# prepare of the httpd server as a deamon and execute it inside 
# the running shell
function preStartApacheService {
    echoVerbose "Remove temporary files in /run/httpd/* and /tmp/httpd*"
    rm -rf /run/httpd/* /tmp/httpd*
    echoVerbose "Prepare Apache logs"
    touch $LOG_PATH/error.log
    if [[ -r $LOG_PATH/error.log ]]; then
      echoVerbose "Display apache error logs from $LOG_PATH/error.log"
      tail -f $LOG_PATH/error.log &
    fi;
    touch $LOG_PATH/access.log
    if [[ -r $LOG_PATH/access.log ]]; then
      echoVerbose "Display apache access logs from $LOG_PATH/access.log"
      tail -f $LOG_PATH/access.log &
    fi;
}

# Start the httpd server as a deamon and execute it inside 
# the running shell
function startApacheService {
    trap 'kill ${!}; stopApacheHandler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    exec /usr/sbin/httpd -D FOREGROUND > $LOG_PATH/access.log &
    while true
    do
        wait ${!}
    done
}

# set env var $2 (val $3) in file $1
function setEnvironmentVariableInFile {
    if [ -z "$3" ]; then
            echoVerbose "Environment variable '$2' not set."
            return
    fi
    echo "SetEnv $2 $3" >> $1
}

function setSys2HttpEnvironmentVariable {
    echoVerbose "adding environement to $1"
    echo "" >> $1
    for _curVar in `env | awk -F = '{print $1}'`;do
        setEnvironmentVariableInFile $1 ${_curVar} ${!_curVar}
    done
}
