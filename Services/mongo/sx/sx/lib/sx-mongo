#!/bin/bash
source $SX_LIBDIR/sx

function check_mongo_environment {
    if [ ! -v APP_PATH ]; then
        APP_PATH="/data"
        export APP_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
}

function mongoInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "engine    : $(mongo --version | head -1)" 
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "data path : $DATA_PATH"
}

function displayMongoRunInformation {
    mongoInformation $1
    echoVerbose $1 "admin     : root:$MYSQL_ROOT_PASSWORD"
    echo $1 "user      : $MYSQL_USER:$MYSQL_PASSWORD"
    echo $1 "database  : $MYSQL_DATABASE"
}

# function executed when build hook is called
function mongoBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo BUILD"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build application logic found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build application logic found at $MYS2I_DEST/assemble"
    doMongoBuild
    fi
    exit 0;
}

# function performing Mongo build actions
function doMongoBuild {
    doGenericBuild
    echoNotVerbose "Executing Mongo build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Mongo build logic"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function mongoPostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo POST-BUILD"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild application logic found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild application logic found at $MYS2I_DEST/post-build"
    doMongoPostBuild
    fi
    exit 0;
}

# function performing Mongo post-build actions
function doMongoPostBuild {
    doGenericPostBuild
    echoNotVerbose "Executing Mongo post-build logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Mongo post-build logic"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function mongoPreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo PRE-DEPLOY"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy application logic found at $MYS2I_DEST/pre-deploy"
    doMongoPreDeploy
    fi
    exit 0;
}

# function performing Mongo pre-deploy actions
function doMongoPreDeploy {
    doGenericPreDeploy
    echoNotVerbose "Executing Mongo pre-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Mongo pre-deploy logic"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function mongoPostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo POST-DEPLOY"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy application logic found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy application logic found at $MYS2I_DEST/post-deploy"
    doMongoPostDeploy
    fi
    exit 0;
}

# function performing Mongo post-deploy actions
function doMongoPostDeploy {
    doGenericPostDeploy
    echoNotVerbose "Executing Mongo post-deploy logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Mongo post-deploy logic"
    echoVerbose "+====================================================="
}

# function executed on container startup
function mongoRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo RUN"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    echoVerbose ""
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run application logic found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run application logic found at $MYS2I_DEST/run"
        echoVerbose "Executing default Mongo run action"
        doMongoRun
    fi
}

# function performing Mongo run actions
function doMongoRun {
    echoNotVerbose "Executing Mongo run logic"
    echoVerbose "+====================================================="
    echoVerbose "| Executing Mongo run logic"
    echoVerbose "+====================================================="
    startMongoService
}

# Display liveness status
function mongoIsLive {
    genericIsLive
}

# Display readyness status
function mongoIsReady {
    genericIsReady
}

function stopMongoHandler {
    killall /usr/bin/mongod
    stopDaemon 
}

# Start the mongo server as a deamon and execute it inside 
# the running shell
function startMongoService {
    trap 'stopMongoHandler' SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGTRAP SIGBUS SIGUSR1 SIGUSR2 SIGFPE SIGPIPE SIGALRM SIGSTOP
    trap 'killDaemon kill 9' SIGKILL
    trap 'killDaemon term 15' SIGTERM
    trap 'killDaemon sys 31' SIGSYS
    exec /usr/bin/mongod --logappend --logpath $LOG_PATH/mongodb.log --dbpath $DATA_PATH --journal
}