#!/bin/bash
source $SX_LIBDIR/sx

function check_mongo_environment {
    if [ ! -v APP_PATH ]; then
        APP_PATH="/data"
        export APP_PATH
    fi
    if [ ! -v LOG_PATH ]; then
        LOG_PATH="/logs"
        export LOG_PATH
    fi
}

function mongoInformation {
    displayInformation $1
    echoVerbose $1 "version   : $SX_VERSION"
    echoVerbose $1 "engine    : $(mongo --version | head -1)" 
    echoVerbose $1 "log path  : $LOG_PATH"
    echoVerbose $1 "data path : $DATA_PATH"
}

function displayMongoRunInformation {
    mongoInformation $1
    echoVerbose $1 "admin     : root:$MYSQL_ROOT_PASSWORD"
    echo $1 "user      : $MYSQL_USER:$MYSQL_PASSWORD"
    echo $1 "database  : $MYSQL_DATABASE"
}

# function executed when build hook is called
function mongoBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo BUILD"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMongoBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "Build source code found at $MYS2I_DEST/assemble"
        testAndRunSourceCodeScript "assemble" 
    else
        echoVerbose "No Build source code found at $MYS2I_DEST/assemble"
    fi
    exit 0;
}

# function performing Mongo build actions
function doMongoBuild {
    doGenericBuild
    echoNotVerbose "Build Mongo"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Build Mongo"
    echoVerbose "+====================================================="
}

# function executed when post-build hook is called
function mongoPostBuild {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo POST-BUILD"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo POST-BUILD"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMongoPostBuild
    if [[ -x $MYS2I_DEST/assemble ]]; then
        echoVerbose "PostBuild source code found at $MYS2I_DEST/post-build"
        testAndRunSourceCodeScript "post-build" 
    else
        echoVerbose "No PostBuild source code found at $MYS2I_DEST/post-build"
    fi
    exit 0;
}

# function performing Mongo post-build actions
function doMongoPostBuild {
    doGenericPostBuild
    echoNotVerbose "PostBuild Mongo"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostBuild Mongo"
    echoVerbose "+====================================================="
}

# function executed when pre-deploy hook is called
function mongoPreDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo PRE-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo PRE-DEPLOY"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMongoPreDeploy
    if [[ -x $MYS2I_DEST/pre-deploy ]]; then
        echoVerbose "PreDeploy source code found at $MYS2I_DEST/pre-deploy"
        testAndRunSourceCodeScript "pre-deploy" 
    else
        echoVerbose "No PreDeploy source code found at $MYS2I_DEST/pre-deploy"
    fi
    exit 0;
}

# function performing Mongo pre-deploy actions
function doMongoPreDeploy {
    doGenericPreDeploy
    echoNotVerbose "PreDeploy Mongo"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PreDeploy Mongo"
    echoVerbose "+====================================================="
}

# function executed when post-deploy hook is called
function mongoPostDeploy {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo POST-DEPLOY"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo POST-DEPLOY"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    doMongoPostDeploy
    if [[ -x $MYS2I_DEST/post-deploy ]]; then
        echoVerbose "PostDeploy source code found at $MYS2I_DEST/post-deploy"
        testAndRunSourceCodeScript "post-deploy" 
    else
        echoVerbose "No PostDeploy source code found at $MYS2I_DEST/post-deploy"
    fi
    exit 0;
}

# function performing Mongo post-deploy actions
function doMongoPostDeploy {
    doGenericPostDeploy
    echoNotVerbose "PostDeploy Mongo"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| PostDeploy Mongo"
    echoVerbose "+====================================================="
}

# function executed on container startup
function mongoRun {
    genericHeader
    echoNotVerbose "container $HOSTNAME executing Mongo RUN"
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME executing Mongo RUN"
    echoVerbose "| "
    mongoInformation "| "
    echoDebug `env`
    echoVerbose "+====================================================="
    if [[ -x $MYS2I_DEST/run ]]; then
        echoVerbose "Run source code found at $MYS2I_DEST/run"
        testAndRunSourceCodeScript "run" 
    else
        echoVerbose "No Run source code found at $MYS2I_DEST/run"
        echoVerbose "Executing default Mongo run action"
        doMongoRun
    fi
}

# function performing Mongo run actions
function doMongoRun {
    echoNotVerbose "Run Mongo"
    echoVerbose ""
    echoVerbose "+====================================================="
    echoVerbose "| Run Mongo"
    echoVerbose "+====================================================="
    startMongoService
}

# Display liveness status
function mongoIsLive {
    genericIsLive
}

# Display readyness status
function mongoIsReady {
    genericIsReady
}

function stop_mongo_handler {
    killall /usr/bin/mongod
    echoVerbose "+====================================================="
    echoVerbose "| Container $HOSTNAME is now STOPPED"
    echoNotVerbose "container is now stopped"
    echoVerbose "| "
    mongoInformation "| "
    echoVerbose "+====================================================="
    exit 143; # 128 + 15 -- SIGTERM
}

# Start the mongo server as a deamon and execute it inside 
# the running shell
function startMongoService {
    trap 'kill ${!}; stop_mongo_handler' SIGHUP SIGINT SIGQUIT SIGTERM SIGKILL SIGSTOP SIGCONT
    /usr/bin/mongod --logappend --logpath $LOG_PATH/mongodb.log --dbpath $DATA_PATH --journal
    exec tail -f /dev/null &
    while true
    do
      tail -f /dev/null & wait ${!}
    done
}